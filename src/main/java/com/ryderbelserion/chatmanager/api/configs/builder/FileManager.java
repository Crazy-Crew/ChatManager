package com.ryderbelserion.chatmanager.api.configs.builder;

import com.ryderbelserion.chatmanager.api.configs.builder.enums.Files;
import org.bukkit.configuration.file.FileConfiguration;
import org.bukkit.configuration.file.YamlConfiguration;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FileManager {

    private final HashMap<Files, File> files = new HashMap<>();

    private final HashMap<Files, FileConfiguration> fileConfigurations = new HashMap<>();
    private final HashMap<String, String> autoGeneratedFiles = new HashMap<>();
    private final HashMap<String, String> jarHomeFolders = new HashMap<>();

    private final List<String> folders = new ArrayList<>();
    private final List<CustomFile> customFiles = new ArrayList<>();

    public FileManager build(File parentFolder) {
        if (!parentFolder.exists()) parentFolder.mkdir();

        files.clear();
        customFiles.clear();
        fileConfigurations.clear();

        for (Files file : Files.values()) {
            File newFile = file.getFile();

            if (!newFile.exists()) {
                InputStream jar = getClass().getResourceAsStream("/" + file.getName());
                try {
                    copyFile(jar, newFile);
                } catch (Exception e) {
                    e.printStackTrace();
                    continue;
                }
            }

            files.put(file, newFile);
            fileConfigurations.put(file, YamlConfiguration.loadConfiguration(newFile));
        }

        if (!folders.isEmpty()) {
            folders.forEach(type -> {
                File file = new File(parentFolder, "/" + type);

                if (file.exists()) {
                    String[] fileList = file.list();

                    if (fileList != null) {
                        for (String name : fileList) {
                            if (name.endsWith(".yml")) {
                                CustomFile customFile = new CustomFile(name, parentFolder.toPath(), type);

                                if (customFile.exists()) customFiles.add(customFile);
                            }
                        }
                    }
                } else {
                    file.mkdir();

                    for (Map.Entry<String, String> files : autoGeneratedFiles.entrySet()) {

                        if (files.getValue().equalsIgnoreCase(type)) {
                            type = files.getValue();

                            try {
                                File serverFile = new File(parentFolder, type + "/" + files.getKey());
                                InputStream jarFile = getClass().getResourceAsStream((jarHomeFolders.getOrDefault(files.getKey(), type)) + "/" + files.getKey());
                                copyFile(jarFile, serverFile);

                                if (files.getKey().toLowerCase().endsWith(".yml")) customFiles.add(new CustomFile(files.getKey(), parentFolder.toPath(), type));

                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                        }
                    }
                }
            });
        }

        return this;
    }

    public FileManager registerCustomFolder(String folder) {
        folders.add(folder);
        return this;
    }

    public FileManager removeCustomFolder(String folder) {
        folders.remove(folder);
        return this;
    }

    public FileManager registerDefaultGeneratedFiles(String fileName, String folder) {
        autoGeneratedFiles.put(fileName, folder);
        return this;
    }

    public FileManager registerDefaultGenerateFiles(String fileName, String folder, String jarFolder) {
        autoGeneratedFiles.put(fileName, folder);
        jarHomeFolders.put(fileName, jarFolder);
        return this;
    }

    public FileManager removeDefaultGenerateFiles(String fileName) {
        autoGeneratedFiles.remove(fileName);
        jarHomeFolders.remove(fileName);
        return this;
    }

    public FileConfiguration getFile(Files file) {
        return fileConfigurations.get(file);
    }

    public CustomFile getFile(String name) {
        for (CustomFile file : customFiles) {
            if (file.getStrippedName().equalsIgnoreCase(name)) return file;
        }

        return null;
    }

    public void saveFile(Files file) {
        try {
            fileConfigurations.get(file).save(files.get(file));
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public void saveFile(String name) {
        CustomFile file = getFile(name);

        if (file != null) {
            try {
                file.getFileConfiguration().save(new File(file.getFolder(), file.getSubFolder() + "/" + file.getFileName()));
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    public boolean saveFile(CustomFile file) {
        return file.save();
    }

    public void reloadFile(Files file) {
        fileConfigurations.put(file, YamlConfiguration.loadConfiguration(files.get(file)));
    }

    private void copyFile(InputStream in, File out) throws Exception {
        try (InputStream fis = in; FileOutputStream fos = new FileOutputStream(out)) {
            byte[] buf = new byte[1024];
            int i;

            while ((i = fis.read(buf)) != -1) {
                fos.write(buf, 0, i);
            }
        }
    }
}